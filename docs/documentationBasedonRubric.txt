Group Members: Jamal Mohamed - Daniel Stone

Requirements : 
We were able to meet all requirements, the ones highlighted yellow are the ones we didn’t meet explicitly but rather are met by the info in the animal.We sent an email to client to get user acceptance and they found it acceptable.

Core Requirements
Find by Scientific name
Find by Common name (Siberian Tiger, Black Bear, Coyote, etc.) 
Look up diet/feeding schedule
Employee sign in
Print out all animal information in a nice formatted view
Look up general care information
Find animals by type (reptile, bird, mammals, etc.)

Supplemental requirements
What they look like (pictures)
What they do
Where they live on earth
Where can I find them in the Zoo
How many live on earth (endangered?)
Warm or cold blooded?
Height/weight
Land speed/ flying speed
Animal’s name (Freddy the monkey)
Fun facts
How many we have at the zoo
Anything else that a zoo keeper might be asked by customers


Use Cases / Requirements : 
For our use cases we wanted a user to be able to browse the website for animals, search those animals, a user could see a random animal or three random animals on the first page. If however that user was a zoo keeper we wanted to give them the ability to login and edit the info of the animal and update the details including images. 


Database Diagram: 
For our Design we chose to keep it simple and only do two collections, first collection was the animals collection in which we put all the attributes of animals. Some of these attributes were embedded in the animal as an object. We embedded these attributes such as the taxonomy and carenotes because at scale we wanted to limit the cost of joins. The user collection was more straightforward so we kept it collection.

Embedding / Normalization / Denormalization : 
We only embedded the care notes and taxonomy, but didn’t do any normalization or denormalization as we were content with our earlier design.

Keys:
 Our keys were pretty self explanatory for our use  and were  useful during queries.




Language and Framework
Python 
 FrameWork (Routing/sessions/database manipulation)
BootStrap for template CSS  
Bcrypt for password encryption  
BeautifulSoup
We chose Python because we thought it was going to be easier to use for mongo manipulation.With the flask framework there was also pymongo driver module named flask-pymongo. We were able to take advantage of Jinja2 for the markup because of flask. We Beautiful to parse html pages on wikipedia. Overall our project the technologies we chose worked surprisingly well.
Group Work: 
4/9 - Worked on project as a group
Created schemas for animal and user

4/13 Caribou (Jamal’s Choice)


Daniel - added scripts to download animals and create json of animal
Add script to download images
Add script to download taxonomy data
Add script to add json to mongodb
Jamal - created login page,Registration page,index page, set up project structure including Static folder, 

4/20 Dunn Bros (Daniel’s Choice)
Jamal - Completed registration ,login and implemented  sessions.
Daniel - Add edit animal page
Daniel - add random animal that redirects to a random animal



4/27 - Worked on project at Caribou
	Daniel: add glossary of animals
update and fix some links

Add some css, js for making long sections of text display in fixed size on index
Create banner image 
Update index and make it look better.
Jamal - Added search functionality.

5/5 -  Jamal 
Animal.html : put into a jumbotron with content centered
edit_animal.html : made content in to a jumbotron
index.html : moved the footer to layout.html
login.html : put the sign outside of the login card
register.html : same as log in.
layout.html put in the footer here 

?/? Daniel
Created AWS Instance
Made domain
Add DNS to site
Add TLS to Flask and Apache
Configured TLS to 1.2 1.3
Added categories like mammals based on taxonomy
Fixed some issues with taxonomy scraping

5/6 Both:
Created Presentation
Switched to a Mobile Friendly Layout

5/7 Presentation and Finish

Client Presentation: 
We sent an email to client and showed clients in class what are project looked like, and we got user acceptance from that.
